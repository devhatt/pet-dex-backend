// Code generated by mockery v2.42.0. DO NOT EDIT.

package interfaces

import (
	entity "pet-dex-backend/v2/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockPetRepository is an autogenerated mock type for the PetRepository type
type MockPetRepository struct {
	mock.Mock
}

type MockPetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPetRepository) EXPECT() *MockPetRepository_Expecter {
	return &MockPetRepository_Expecter{mock: &_m.Mock}
}

// ListByUser provides a mock function with given fields: userID
func (_m *MockPetRepository) ListByUser(userID uuid.UUID) ([]*entity.Pet, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []*entity.Pet
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]*entity.Pet, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*entity.Pet); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Pet)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPetRepository_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type MockPetRepository_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - userID uuid.UUID
func (_e *MockPetRepository_Expecter) ListByUser(userID interface{}) *MockPetRepository_ListByUser_Call {
	return &MockPetRepository_ListByUser_Call{Call: _e.mock.On("ListByUser", userID)}
}

func (_c *MockPetRepository_ListByUser_Call) Run(run func(userID uuid.UUID)) *MockPetRepository_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockPetRepository_ListByUser_Call) Return(_a0 []*entity.Pet, _a1 error) *MockPetRepository_ListByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPetRepository_ListByUser_Call) RunAndReturn(run func(uuid.UUID) ([]*entity.Pet, error)) *MockPetRepository_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: pet
func (_m *MockPetRepository) Save(pet entity.Pet) error {
	ret := _m.Called(pet)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Pet) error); ok {
		r0 = rf(pet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPetRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockPetRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - pet entity.Pet
func (_e *MockPetRepository_Expecter) Save(pet interface{}) *MockPetRepository_Save_Call {
	return &MockPetRepository_Save_Call{Call: _e.mock.On("Save", pet)}
}

func (_c *MockPetRepository_Save_Call) Run(run func(pet entity.Pet)) *MockPetRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Pet))
	})
	return _c
}

func (_c *MockPetRepository_Save_Call) Return(_a0 error) *MockPetRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPetRepository_Save_Call) RunAndReturn(run func(entity.Pet) error) *MockPetRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: petID, userID, updatePayload
func (_m *MockPetRepository) Update(petID string, userID string, updatePayload map[string]interface{}) error {
	ret := _m.Called(petID, userID, updatePayload)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) error); ok {
		r0 = rf(petID, userID, updatePayload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPetRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPetRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - petID string
//   - userID string
//   - updatePayload map[string]interface{}
func (_e *MockPetRepository_Expecter) Update(petID interface{}, userID interface{}, updatePayload interface{}) *MockPetRepository_Update_Call {
	return &MockPetRepository_Update_Call{Call: _e.mock.On("Update", petID, userID, updatePayload)}
}

func (_c *MockPetRepository_Update_Call) Run(run func(petID string, userID string, updatePayload map[string]interface{})) *MockPetRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockPetRepository_Update_Call) Return(_a0 error) *MockPetRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPetRepository_Update_Call) RunAndReturn(run func(string, string, map[string]interface{}) error) *MockPetRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPetRepository creates a new instance of MockPetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPetRepository {
	mock := &MockPetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
