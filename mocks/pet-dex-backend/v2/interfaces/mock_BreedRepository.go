// Code generated by mockery v2.43.2. DO NOT EDIT.

package interfaces

import (
	entity "pet-dex-backend/v2/entity"
	dto "pet-dex-backend/v2/entity/dto"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockBreedRepository is an autogenerated mock type for the BreedRepository type
type MockBreedRepository struct {
	mock.Mock
}

type MockBreedRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBreedRepository) EXPECT() *MockBreedRepository_Expecter {
	return &MockBreedRepository_Expecter{mock: &_m.Mock}
}

// FindByID provides a mock function with given fields: ID
func (_m *MockBreedRepository) FindByID(ID uuid.UUID) (*entity.Breed, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entity.Breed
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*entity.Breed, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entity.Breed); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Breed)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBreedRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockBreedRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ID uuid.UUID
func (_e *MockBreedRepository_Expecter) FindByID(ID interface{}) *MockBreedRepository_FindByID_Call {
	return &MockBreedRepository_FindByID_Call{Call: _e.mock.On("FindByID", ID)}
}

func (_c *MockBreedRepository_FindByID_Call) Run(run func(ID uuid.UUID)) *MockBreedRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockBreedRepository_FindByID_Call) Return(_a0 *entity.Breed, _a1 error) *MockBreedRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBreedRepository_FindByID_Call) RunAndReturn(run func(uuid.UUID) (*entity.Breed, error)) *MockBreedRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields:
func (_m *MockBreedRepository) List() ([]*dto.BreedList, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*dto.BreedList
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*dto.BreedList, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*dto.BreedList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.BreedList)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBreedRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockBreedRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockBreedRepository_Expecter) List() *MockBreedRepository_List_Call {
	return &MockBreedRepository_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockBreedRepository_List_Call) Run(run func()) *MockBreedRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBreedRepository_List_Call) Return(breeds []*dto.BreedList, err error) *MockBreedRepository_List_Call {
	_c.Call.Return(breeds, err)
	return _c
}

func (_c *MockBreedRepository_List_Call) RunAndReturn(run func() ([]*dto.BreedList, error)) *MockBreedRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBreedRepository creates a new instance of MockBreedRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBreedRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBreedRepository {
	mock := &MockBreedRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
