// Code generated by mockery v2.42.0. DO NOT EDIT.

package interfaces

import (
	entity "pet-dex-backend/v2/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id
func (_m *MockUserRepository) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockUserRepository_Expecter) Delete(id interface{}) *MockUserRepository_Delete_Call {
	return &MockUserRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockUserRepository_Delete_Call) Run(run func(id uuid.UUID)) *MockUserRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepository_Delete_Call) Return(_a0 error) *MockUserRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_Delete_Call) RunAndReturn(run func(uuid.UUID) error) *MockUserRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function with given fields: email
func (_m *MockUserRepository) FindByEmail(email string) *entity.User {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	return r0
}

// MockUserRepository_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type MockUserRepository_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockUserRepository_Expecter) FindByEmail(email interface{}) *MockUserRepository_FindByEmail_Call {
	return &MockUserRepository_FindByEmail_Call{Call: _e.mock.On("FindByEmail", email)}
}

func (_c *MockUserRepository_FindByEmail_Call) Run(run func(email string)) *MockUserRepository_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_FindByEmail_Call) Return(_a0 *entity.User) *MockUserRepository_FindByEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_FindByEmail_Call) RunAndReturn(run func(string) *entity.User) *MockUserRepository_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockUserRepository) FindById(id uuid.UUID) *entity.User {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entity.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	return r0
}

// MockUserRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockUserRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockUserRepository_Expecter) FindById(id interface{}) *MockUserRepository_FindById_Call {
	return &MockUserRepository_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockUserRepository_FindById_Call) Run(run func(id uuid.UUID)) *MockUserRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepository_FindById_Call) Return(_a0 *entity.User) *MockUserRepository_FindById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_FindById_Call) RunAndReturn(run func(uuid.UUID) *entity.User) *MockUserRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields:
func (_m *MockUserRepository) List() ([]entity.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUserRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) List() *MockUserRepository_List_Call {
	return &MockUserRepository_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockUserRepository_List_Call) Run(run func()) *MockUserRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_List_Call) Return(_a0 []entity.User, _a1 error) *MockUserRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_List_Call) RunAndReturn(run func() ([]entity.User, error)) *MockUserRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: user
func (_m *MockUserRepository) Save(user *entity.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockUserRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - user *entity.User
func (_e *MockUserRepository_Expecter) Save(user interface{}) *MockUserRepository_Save_Call {
	return &MockUserRepository_Save_Call{Call: _e.mock.On("Save", user)}
}

func (_c *MockUserRepository_Save_Call) Run(run func(user *entity.User)) *MockUserRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.User))
	})
	return _c
}

func (_c *MockUserRepository_Save_Call) Return(_a0 error) *MockUserRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_Save_Call) RunAndReturn(run func(*entity.User) error) *MockUserRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAddress provides a mock function with given fields: addr
func (_m *MockUserRepository) SaveAddress(addr *entity.Address) error {
	ret := _m.Called(addr)

	if len(ret) == 0 {
		panic("no return value specified for SaveAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Address) error); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_SaveAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAddress'
type MockUserRepository_SaveAddress_Call struct {
	*mock.Call
}

// SaveAddress is a helper method to define mock.On call
//   - addr *entity.Address
func (_e *MockUserRepository_Expecter) SaveAddress(addr interface{}) *MockUserRepository_SaveAddress_Call {
	return &MockUserRepository_SaveAddress_Call{Call: _e.mock.On("SaveAddress", addr)}
}

func (_c *MockUserRepository_SaveAddress_Call) Run(run func(addr *entity.Address)) *MockUserRepository_SaveAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Address))
	})
	return _c
}

func (_c *MockUserRepository_SaveAddress_Call) Return(_a0 error) *MockUserRepository_SaveAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_SaveAddress_Call) RunAndReturn(run func(*entity.Address) error) *MockUserRepository_SaveAddress_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: userID, user
func (_m *MockUserRepository) Update(userID uuid.UUID, user entity.User) error {
	ret := _m.Called(userID, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, entity.User) error); ok {
		r0 = rf(userID, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - userID uuid.UUID
//   - user entity.User
func (_e *MockUserRepository_Expecter) Update(userID interface{}, user interface{}) *MockUserRepository_Update_Call {
	return &MockUserRepository_Update_Call{Call: _e.mock.On("Update", userID, user)}
}

func (_c *MockUserRepository_Update_Call) Run(run func(userID uuid.UUID, user entity.User)) *MockUserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(entity.User))
	})
	return _c
}

func (_c *MockUserRepository_Update_Call) Return(_a0 error) *MockUserRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_Update_Call) RunAndReturn(run func(uuid.UUID, entity.User) error) *MockUserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
