// Code generated by mockery v2.43.2. DO NOT EDIT.

package interfaces

import (
	dto "pet-dex-backend/v2/entity/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockSingleSignOnProvider is an autogenerated mock type for the SingleSignOnProvider type
type MockSingleSignOnProvider struct {
	mock.Mock
}

type MockSingleSignOnProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSingleSignOnProvider) EXPECT() *MockSingleSignOnProvider_Expecter {
	return &MockSingleSignOnProvider_Expecter{mock: &_m.Mock}
}

// GetUserDetails provides a mock function with given fields: provider, accessToken
func (_m *MockSingleSignOnProvider) GetUserDetails(provider string, accessToken string) (*dto.UserSSODto, error) {
	ret := _m.Called(provider, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDetails")
	}

	var r0 *dto.UserSSODto
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*dto.UserSSODto, error)); ok {
		return rf(provider, accessToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) *dto.UserSSODto); ok {
		r0 = rf(provider, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserSSODto)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(provider, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSingleSignOnProvider_GetUserDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDetails'
type MockSingleSignOnProvider_GetUserDetails_Call struct {
	*mock.Call
}

// GetUserDetails is a helper method to define mock.On call
//   - provider string
//   - accessToken string
func (_e *MockSingleSignOnProvider_Expecter) GetUserDetails(provider interface{}, accessToken interface{}) *MockSingleSignOnProvider_GetUserDetails_Call {
	return &MockSingleSignOnProvider_GetUserDetails_Call{Call: _e.mock.On("GetUserDetails", provider, accessToken)}
}

func (_c *MockSingleSignOnProvider_GetUserDetails_Call) Run(run func(provider string, accessToken string)) *MockSingleSignOnProvider_GetUserDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockSingleSignOnProvider_GetUserDetails_Call) Return(_a0 *dto.UserSSODto, _a1 error) *MockSingleSignOnProvider_GetUserDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSingleSignOnProvider_GetUserDetails_Call) RunAndReturn(run func(string, string) (*dto.UserSSODto, error)) *MockSingleSignOnProvider_GetUserDetails_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSingleSignOnProvider creates a new instance of MockSingleSignOnProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSingleSignOnProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSingleSignOnProvider {
	mock := &MockSingleSignOnProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
