basePath: /
definitions:
  dto.BreedList:
    properties:
      id:
        example: 0e0b8399-1bf1-4ed5-a2f4-b5789ddf5df0
        type: string
      img_url:
        example: https://images.unsplash.com/photo-1530281700549-e82e7bf110d6?q=80&w=1888&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
        type: string
      name:
        example: Pastor Alemão
        type: string
    type: object
  dto.Link:
    properties:
      text:
        example: Facebook da Ong
        type: string
      url:
        example: https://www.facebook.com/
        type: string
    type: object
  dto.OngUpdateDto:
    properties:
      adoptionPolicy:
        example: não pode rato
        type: string
      links:
        items:
          $ref: '#/definitions/dto.Link'
        type: array
      openingHours:
        example: "08:00"
        type: string
      phone:
        example: "119596995887"
        type: string
      user:
        $ref: '#/definitions/dto.UserUpdateDto'
    type: object
  dto.PetInsertDto:
    properties:
      adoption_date:
        example: "2008-01-02T15:04:05Z"
        type: string
      birthdate:
        example: "2006-01-02T15:04:05Z"
        type: string
      breed_id:
        example: 0e0b8399-1bf1-4ed5-a2f4-b5789ddf5df0
        type: string
      name:
        example: Thor
        type: string
      size:
        example: medium
        type: string
      user_id:
        example: fa1b8ae8-5351-11ef-8f02-0242ac130003
        type: string
      weight:
        example: 4.1
        type: number
    type: object
  dto.PetUpdateDto:
    properties:
      adoption_date:
        example: "2008-01-02T00:00:00Z"
        type: string
      available_to_adoption:
        example: true
        type: boolean
      birthdate:
        example: "2006-01-02T00:00:00Z"
        type: string
      breed_id:
        example: 0e0b8399-1bf1-4ed5-a2f4-b5789ddf5df0
        type: string
      castrated:
        example: true
        type: boolean
      comorbidity:
        example: asma
        type: string
      name:
        example: Spike
        type: string
      size:
        example: small
        type: string
      special_care:
        $ref: '#/definitions/dto.SpecialCareDto'
      tags:
        example: Dog
        type: string
      vaccines:
        items:
          $ref: '#/definitions/dto.VaccinesDto'
        type: array
      weight:
        example: 4.8
        type: number
      weight_measure:
        example: kg
        type: string
    type: object
  dto.SpecialCareDto:
    properties:
      descriptionSpecialCare:
        example: obesity
        type: string
      neededSpecialCare:
        example: true
        type: boolean
    type: object
  dto.UserInsertDto:
    properties:
      avatar_url:
        example: https://example.com/avatar.jpg
        type: string
      birthdate:
        example: "2006-01-02T15:04:05Z"
        type: string
      city:
        example: São Paulo
        type: string
      document:
        example: "12345678900"
        type: string
      email:
        example: claudio@example.com
        type: string
      name:
        example: Claúdio
        type: string
      pass:
        example: Senhasegur@123
        type: string
      phone:
        example: "21912345678"
        type: string
      role:
        example: developer
        type: string
      state:
        example: São Paulo
        type: string
      type:
        example: fisica
        type: string
    type: object
  dto.UserUpdateDto:
    properties:
      avatar_url:
        type: string
      birthdate:
        type: string
      document:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      pushNotificationsEnabled:
        type: boolean
      role:
        type: string
    type: object
  dto.VaccinesDto:
    properties:
      date:
        example: "2007-01-02T00:00:00Z"
        type: string
      doctor_crm:
        example: "000000"
        type: string
      name:
        example: PetVax
        type: string
    type: object
  entity.Pet:
    properties:
      adoption_date:
        type: string
      available_to_adoption:
        type: boolean
      birthdate:
        type: string
      breed_id:
        type: string
      breed_name:
        type: string
      castrated:
        type: boolean
      comorbidity:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      size:
        type: string
      special_care:
        $ref: '#/definitions/entity.SpecialCare'
      tags:
        type: string
      user_id:
        type: string
      vaccines:
        items:
          $ref: '#/definitions/entity.Vaccines'
        type: array
      weight:
        type: number
      weight_measure:
        type: string
    type: object
  entity.SpecialCare:
    properties:
      descriptionSpecialCare:
        type: string
      neededSpecialCare:
        type: boolean
    type: object
  entity.Vaccines:
    properties:
      date:
        type: string
      doctor_crm:
        type: string
      id:
        type: string
      name:
        type: string
      pet_id:
        type: string
    type: object
host: localhost:3000/api
info:
  contact:
    name: DevHatt
    url: https://github.com/devhatt
  description: Esta página se destina a documentação da API do projeto PetDex Backend
  license:
    name: MIT license
    url: https://github.com/devhatt/pet-dex-backend?tab=MIT-1-ov-file#readme
  title: 'PetDex: Documentação API'
  version: "1.0"
paths:
  /ongs/{ongID}:
    patch:
      consumes:
      - application/json
      description: Updates the details of an existing Ong based on the provided Ong
        ID.
      parameters:
      - description: Ong id to be updated
        in: path
        name: ongID
        required: true
        type: string
      - description: Data to update of the Ong
        in: body
        name: ongDto
        required: true
        schema:
          $ref: '#/definitions/dto.OngUpdateDto'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Update Ong By ID
      tags:
      - Ong
  /pets/:
    get:
      description: Public route for viewing all pets.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Pet'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: View list of all pets.
      tags:
      - Pet
    post:
      consumes:
      - application/json
      description: Sends the Pet's registration data via the request body for persistence
        in the database.
      parameters:
      - description: Pet object information for registration
        in: body
        name: petDto
        required: true
        schema:
          $ref: '#/definitions/dto.PetInsertDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create Pet by petDto
      tags:
      - Pet
  /pets/{petID}:
    get:
      consumes:
      - application/json
      description: Retrieves Pet details based on the pet ID provided as a parameter.
      parameters:
      - description: ID of the Pet to be retrieved
        in: path
        name: petID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Pet'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Find Pet by ID
      tags:
      - Pet
  /pets/breeds/:
    get:
      description: Retrieves list of all pet breeds
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BreedList'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: View list of all Breeds
      tags:
      - Pet
  /user/{userID}/my-pets:
    get:
      consumes:
      - application/json
      description: List all pets owned by the user corresponding to the provided user
        ID
      parameters:
      - description: ID of the User
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Pet'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: List pets by user id
      tags:
      - User
  /user/{userID}/pets/{petID}:
    patch:
      consumes:
      - application/json
      description: Update the Pet's registration data via the request body for persistence
        in the database.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Pet ID
        in: path
        name: petID
        required: true
        type: string
      - description: Pet object information for update of data
        in: body
        name: petDto
        required: true
        schema:
          $ref: '#/definitions/dto.PetUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Update an Pet existing.
      tags:
      - User
  /user/create-account:
    post:
      consumes:
      - application/json
      description: Creates user and insert into the database
      parameters:
      - description: User object information to create
        in: body
        name: userDto
        required: true
        schema:
          $ref: '#/definitions/dto.UserInsertDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Creates user
      tags:
      - User
swagger: "2.0"
